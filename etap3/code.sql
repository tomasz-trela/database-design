-- =================================================================
-- TYPY DANYCH
-- =================================================================

CREATE TYPE "unit_of_mesurement" AS ENUM (
	'g', 'ml', 'kg', 'l', 'piece'
);

CREATE TYPE "order_status" AS ENUM (
	'accepted', 'in progress', 'awaiting delivery', 'in delivery', 'delivered'
);

CREATE TYPE "complaint_status" AS ENUM (
	'submitted', 'under review', 'positively resolved', 'negatively resolved'
);

CREATE TYPE "invoice_status" AS ENUM (
	'issued', 'pending payment', 'paid', 'cancelled'
);

-- =================================================================
-- TWORZENIE TABEL
-- =================================================================

CREATE TABLE IF NOT EXISTS "address" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"country" TEXT NOT NULL,
	"region" TEXT,
	"postal_code" VARCHAR(16) NOT NULL,
	"city" TEXT NOT NULL,
	"street_name" TEXT NOT NULL,
	"street_number" VARCHAR(8) NOT NULL,
	"apartment" VARCHAR(8),
	"created_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
	"deleted_at" TIMESTAMPTZ,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "role" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(50) NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "user" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"role_id" INTEGER NOT NULL,
	"login" VARCHAR(50) NOT NULL UNIQUE,
	"email" VARCHAR(255) NOT NULL UNIQUE,
	"password_hash" VARCHAR(255) NOT NULL,
	"name" VARCHAR(50) NOT NULL,
	"surname" VARCHAR(50) NOT NULL,
	"phone_number" VARCHAR(16),
	"date_created" DATE NOT NULL,
	"date_removed" DATE,
	"last_login" TIMESTAMP,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "customer" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL UNIQUE,
	"default_address" INTEGER,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "order" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"status" ORDER_STATUS NOT NULL,
	"vat_rate" NUMERIC(6,4) NOT NULL,
	"vat_total" NUMERIC(18,2) NOT NULL,
	"net_total" NUMERIC(18,2) NOT NULL,
	"gross_total" NUMERIC(18,2) NOT NULL,
	"placed_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
	"customer_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "order_item" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"expected_delivery_at" TIMESTAMPTZ NOT NULL,
	"order_id" INTEGER NOT NULL,
	"delivery_address" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "course" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT NOT NULL,
	"price" DECIMAL(5,2) NOT NULL,
	"protein_100g" REAL NOT NULL,
	"calories_100g" INTEGER NOT NULL,
	"carbohydrates_100g" REAL NOT NULL,
	"fat_100g" REAL NOT NULL,
	"created_at" TIMESTAMP NOT NULL,
	"updated_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "course_in_order_item" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "complaint" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"customer_id" INTEGER NOT NULL,
	"course_in_order_id" INTEGER NOT NULL,
	"date" TIMESTAMPTZ NOT NULL,
	"status" COMPLAINT_STATUS NOT NULL,
	"description" TEXT NOT NULL,
	"refund_amount" NUMERIC(8,2),
	"resolution_date" TIMESTAMPTZ,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "invoice" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"invoice_number" VARCHAR(255) NOT NULL UNIQUE,
	"status" INVOICE_STATUS NOT NULL,
	"seller_name" TEXT NOT NULL,
	"seller_vat_id" VARCHAR(20) NOT NULL,
	"buyer_name" TEXT NOT NULL,
	"buyer_vat_id" VARCHAR(20),
	"currency" CHAR(3) NOT NULL,
	"payment_method" VARCHAR(25) NOT NULL,
	"payment_terms" TEXT,
	"sale_date" DATE NOT NULL,
	"payment_date" DATE NOT NULL,
	"issue_date" DATE NOT NULL,
	"net_total" NUMERIC(18,2) NOT NULL,
	"vat_total" NUMERIC(18,2) NOT NULL,
	"gross_total" NUMERIC(18,2) NOT NULL,
	"order_id" INTEGER NOT NULL,
	"seller_address_id" INTEGER NOT NULL,
	"buyer_address_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);
COMMENT ON COLUMN "invoice"."seller_vat_id" IS 'NIP';

CREATE TABLE IF NOT EXISTS "invoice_item" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"line_number" INTEGER NOT NULL,
	"name" TEXT NOT NULL,
	"description" TEXT,
	"quantity" NUMERIC(18,6) NOT NULL,
	"unit" VARCHAR(16) NOT NULL,
	"vat_rate" NUMERIC(6,4) NOT NULL,
	"vat_amount" NUMERIC(18,2) NOT NULL,
	"net_amount" NUMERIC(18,2) NOT NULL,
	"gross_amount" NUMERIC(18,2) NOT NULL,
	"invoice_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "allergen" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "ingredient" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	"calories_100g" INTEGER NOT NULL,
	"unit_of_measure" UNIT_OF_MESUREMENT NOT NULL,
	"protein_100g" REAL NOT NULL,
	"fat_100g" REAL NOT NULL,
	"carbohydrates_100g" REAL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "preference" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"customer_id" INTEGER NOT NULL,
	"ingredient_id" INTEGER NOT NULL,
	"rating" INTEGER NOT NULL,
    PRIMARY KEY("id"),
    UNIQUE("customer_id", "ingredient_id")
);

CREATE TABLE IF NOT EXISTS "opinion" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"customer_id" INTEGER NOT NULL,
	"rating" INTEGER NOT NULL,
	"opinion" TEXT,
    PRIMARY KEY("id"),
    UNIQUE("course_id", "customer_id")
);

CREATE TABLE IF NOT EXISTS "category" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "dietician" (
	"user_id" INTEGER NOT NULL PRIMARY KEY,
	"certification" VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS "meal_plan" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"start_date" DATE,
	"end_date" DATE,
	"description" TEXT,
	"dietician_id" INTEGER,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "meal_plan_day" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"day_number" INTEGER NOT NULL,
	"meal_plan_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("day_number", "meal_plan_id")
);

CREATE TABLE IF NOT EXISTS "meal_plan_item" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"meal_plan_day_id" INTEGER NOT NULL,
    PRIMARY KEY("id"),
    UNIQUE("course_id", "meal_plan_day_id")
);

CREATE TABLE IF NOT EXISTS "daily_menu" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"dietitian_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "daily_menu_item" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"menu_id" INTEGER NOT NULL,
	"course_id" INTEGER NOT NULL,
	"sequence" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("menu_id", "sequence"),
    UNIQUE("menu_id", "course_id")
);
COMMENT ON COLUMN "daily_menu_item"."sequence" IS 'kolejność posiłków w menu';

CREATE TABLE IF NOT EXISTS "order_item_fulfillment_status" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "cook" (
	"user_id" INTEGER NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS "order_item_fulfillment" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"cook_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	"status_id" INTEGER NOT NULL,
	"began_at" TIMESTAMP,
	"completed_at" TIMESTAMP,
	"last_updated_at" TIMESTAMP NOT NULL,
	"notes" VARCHAR(255),
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "order_item_delivery_status" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255),
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "courier" (
	"user_id" INTEGER NOT NULL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS "order_item_delivery" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"courier_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	"status_id" INTEGER NOT NULL,
	"began_at" TIMESTAMP,
	"delivered_at" TIMESTAMP,
	"last_updated" TIMESTAMP NOT NULL,
	"notes" VARCHAR(255),
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "specialty" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "courier_type" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	PRIMARY KEY("id")
);

CREATE TABLE IF NOT EXISTS "administrator" (
	"user_id" INTEGER NOT NULL PRIMARY KEY,
	"date_granted" DATE NOT NULL,
	"date_revoked" DATE
);

-- =================================================================
-- TABELE ŁĄCZĄCE (WIELE-DO-WIELU)
-- =================================================================

CREATE TABLE IF NOT EXISTS "course_ingredient" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"ingredient_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("course_id", "ingredient_id")
);

CREATE TABLE IF NOT EXISTS "allergen_customer" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"allergen_id" INTEGER NOT NULL,
	"customer_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("allergen_id", "customer_id")
);

CREATE TABLE IF NOT EXISTS "allergen_ingredient" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"allergen_id" INTEGER NOT NULL,
	"ingredient_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("allergen_id", "ingredient_id")
);

CREATE TABLE IF NOT EXISTS "course_category" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"category_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("course_id", "category_id")
);

CREATE TABLE IF NOT EXISTS "courier_types" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"courier_id" INTEGER NOT NULL,
	"courier_type_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("courier_id", "courier_type_id")
);

CREATE TABLE IF NOT EXISTS "cook_speciality" (
    "id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"cook_id" INTEGER NOT NULL,
	"specialty_id" INTEGER NOT NULL,
	PRIMARY KEY("id"),
    UNIQUE("cook_id", "specialty_id")
);


-- =================================================================
-- DODAWANIE KLUCZY OBCYCH (RELACJE)
-- =================================================================

ALTER TABLE "user" ADD FOREIGN KEY("role_id") REFERENCES "role"("id");

ALTER TABLE "customer" ADD FOREIGN KEY("user_id") REFERENCES "user"("id");
ALTER TABLE "customer" ADD FOREIGN KEY("default_address") REFERENCES "address"("id");

ALTER TABLE "order" ADD FOREIGN KEY("customer_id") REFERENCES "customer"("id");

ALTER TABLE "order_item" ADD FOREIGN KEY("order_id") REFERENCES "order"("id");
ALTER TABLE "order_item" ADD FOREIGN KEY("delivery_address") REFERENCES "address"("id");

ALTER TABLE "course_in_order_item" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");
ALTER TABLE "course_in_order_item" ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("id");

ALTER TABLE "complaint" ADD FOREIGN KEY("customer_id") REFERENCES "customer"("id");
ALTER TABLE "complaint" ADD FOREIGN KEY("course_in_order_id") REFERENCES "course_in_order_item"("id");

ALTER TABLE "invoice" ADD FOREIGN KEY("order_id") REFERENCES "order"("id");
ALTER TABLE "invoice" ADD FOREIGN KEY("seller_address_id") REFERENCES "address"("id");
ALTER TABLE "invoice" ADD FOREIGN KEY("buyer_address_id") REFERENCES "address"("id");

ALTER TABLE "invoice_item" ADD FOREIGN KEY("invoice_id") REFERENCES "invoice"("id");

ALTER TABLE "opinion" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");
ALTER TABLE "opinion" ADD FOREIGN KEY("customer_id") REFERENCES "customer"("id");

ALTER TABLE "preference" ADD FOREIGN KEY("customer_id") REFERENCES "customer"("id");
ALTER TABLE "preference" ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("id");

ALTER TABLE "dietician" ADD FOREIGN KEY("user_id") REFERENCES "user"("id");
ALTER TABLE "cook" ADD FOREIGN KEY("user_id") REFERENCES "user"("id");
ALTER TABLE "courier" ADD FOREIGN KEY("user_id") REFERENCES "user"("id");
ALTER TABLE "administrator" ADD FOREIGN KEY("user_id") REFERENCES "user"("id");

ALTER TABLE "meal_plan" ADD FOREIGN KEY("dietician_id") REFERENCES "dietician"("user_id");

ALTER TABLE "meal_plan_day" ADD FOREIGN KEY("meal_plan_id") REFERENCES "meal_plan"("id");

ALTER TABLE "meal_plan_item" ADD FOREIGN KEY("meal_plan_day_id") REFERENCES "meal_plan_day"("id");
ALTER TABLE "meal_plan_item" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");

ALTER TABLE "daily_menu" ADD FOREIGN KEY("dietitian_id") REFERENCES "dietician"("user_id");

ALTER TABLE "daily_menu_item" ADD FOREIGN KEY("menu_id") REFERENCES "daily_menu"("id");
ALTER TABLE "daily_menu_item" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");

ALTER TABLE "order_item_fulfillment" ADD FOREIGN KEY("cook_id") REFERENCES "cook"("user_id");
ALTER TABLE "order_item_fulfillment" ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("id");
ALTER TABLE "order_item_fulfillment" ADD FOREIGN KEY("status_id") REFERENCES "order_item_fulfillment_status"("id");

ALTER TABLE "order_item_delivery" ADD FOREIGN KEY("courier_id") REFERENCES "courier"("user_id");
ALTER TABLE "order_item_delivery" ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("id");
ALTER TABLE "order_item_delivery" ADD FOREIGN KEY("status_id") REFERENCES "order_item_delivery_status"("id");

-- Klucze obce dla tabel łączących
ALTER TABLE "course_ingredient" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");
ALTER TABLE "course_ingredient" ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("id");

ALTER TABLE "course_category" ADD FOREIGN KEY("course_id") REFERENCES "course"("id");
ALTER TABLE "course_category" ADD FOREIGN KEY("category_id") REFERENCES "category"("id");

ALTER TABLE "allergen_customer" ADD FOREIGN KEY("allergen_id") REFERENCES "allergen"("id");
ALTER TABLE "allergen_customer" ADD FOREIGN KEY("customer_id") REFERENCES "customer"("id");

ALTER TABLE "allergen_ingredient" ADD FOREIGN KEY("allergen_id") REFERENCES "allergen"("id");
ALTER TABLE "allergen_ingredient" ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("id");

ALTER TABLE "cook_speciality" ADD FOREIGN KEY("cook_id") REFERENCES "cook"("user_id");
ALTER TABLE "cook_speciality" ADD FOREIGN KEY("specialty_id") REFERENCES "specialty"("id");

ALTER TABLE "courier_types" ADD FOREIGN KEY("courier_id") REFERENCES "courier"("user_id");
ALTER TABLE "courier_types" ADD FOREIGN KEY("courier_type_id") REFERENCES "courier_type"("id");