CREATE TYPE "unit_of_mesurement" AS ENUM (
	'g',
	'ml',
	'kg',
	'l',
	'piece'
);

CREATE TYPE "order_status" AS ENUM (
	'accepted',
	'in progress',
	'awaiting delivery',
	'in delivery',
	'delivered'
);

CREATE TYPE "complaint_status" AS ENUM (
	'submitted',
	'under review',
	'positively resolved',
	'negatively resolved'
);

CREATE TYPE "invoice_status" AS ENUM (
	'issued',
	'pending payment',
	'paid',
	'cancelled'
);

CREATE TABLE IF NOT EXISTS "complaint" (
	"complaint_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"customer_id" INTEGER NOT NULL,
	"course_in_order_id" INTEGER NOT NULL,
	"date" TIMESTAMPTZ NOT NULL,
	"status" COMPLAINT_STATUS NOT NULL,
	"description" TEXT NOT NULL,
	"refund_amount" NUMERIC(8,2),
	"resolution_date" TIMESTAMPTZ,
	PRIMARY KEY("complaint_id")
);




CREATE TABLE IF NOT EXISTS "customer" (
	"customer_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL UNIQUE,
	"default_address_id" INTEGER,
	PRIMARY KEY("customer_id")
);




CREATE TABLE IF NOT EXISTS "order" (
	"order_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"status" ORDER_STATUS NOT NULL,
	"vat_rate" NUMERIC(6,4) NOT NULL,
	"vat_total" NUMERIC(18,2) NOT NULL,
	"net_total" NUMERIC(18,2) NOT NULL,
	"gross_total" NUMERIC(18,2) NOT NULL,
	"placed_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
	"customer_id" INTEGER NOT NULL,
	PRIMARY KEY("order_id")
);




CREATE TABLE IF NOT EXISTS "order_item" (
	"order_item_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"expected_delivery_at" TIMESTAMPTZ NOT NULL,
	"order_id" INTEGER NOT NULL,
	"delivery_address" INTEGER NOT NULL,
	PRIMARY KEY("order_item_id")
);




CREATE TABLE IF NOT EXISTS "address" (
	"address_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"country" TEXT NOT NULL,
	"region" TEXT,
	"postal_code" VARCHAR(16) NOT NULL,
	"city" TEXT NOT NULL,
	"street_name" TEXT NOT NULL,
	"street_number" VARCHAR(8) NOT NULL,
	"apartment" VARCHAR(8),
	"created_at" TIMESTAMPTZ NOT NULL DEFAULT now(),
	"deleted_at" TIMESTAMPTZ,
	PRIMARY KEY("address_id")
);




CREATE TABLE IF NOT EXISTS "invoice" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"invoice_number" TEXT NOT NULL UNIQUE,
	"status" INVOICE_STATUS NOT NULL,
	"seller_name" TEXT NOT NULL,
	-- NIP
	"seller_vat_id" VARCHAR(20) NOT NULL,
	"buyer_name" TEXT NOT NULL,
	"buyer_vat_id" VARCHAR(20),
	"currency" CHAR(3) NOT NULL,
	"payment_method" VARCHAR(25) NOT NULL,
	"payment_terms" TEXT,
	"sale_date" DATE NOT NULL,
	"payment_date" DATE NOT NULL,
	"issue_date" DATE NOT NULL,
	"vat_rate" NUMERIC(6,4) NOT NULL,
	"net_total" NUMERIC(18,2) NOT NULL,
	"vat_total" NUMERIC(18,2) NOT NULL,
	"gross_total" NUMERIC(18,2) NOT NULL,
	"order_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);


COMMENT ON COLUMN "invoice"."seller_vat_id" IS 'NIP';


CREATE TABLE IF NOT EXISTS "course" (
	"course_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT NOT NULL,
	"price" DECIMAL(5,2) NOT NULL,
	"protein_100g" REAL NOT NULL,
	"calories_100g" INTEGER NOT NULL,
	"carbohydrates_100g" REAL NOT NULL,
	"fat_100g" REAL NOT NULL,
	"created_at" TIMESTAMP NOT NULL,
	"updated_at" TIMESTAMP NOT NULL,
	PRIMARY KEY("course_id")
);




CREATE TABLE IF NOT EXISTS "course_in_order_item" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "user" (
	"user_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"login" VARCHAR(50) NOT NULL UNIQUE,
	"email" VARCHAR(255) NOT NULL UNIQUE,
	"password_hash" VARCHAR(255) NOT NULL,
	"name" VARCHAR(50) NOT NULL,
	"surname" VARCHAR(50) NOT NULL,
	"phone_number" VARCHAR(16),
	"date_created" DATE NOT NULL DEFAULT now(),
	"date_removed" DATE,
	"last_login" TIMESTAMP,
	PRIMARY KEY("user_id")
);

COMMENT ON TABLE "user" IS 'UNIQUE (Login),                   
    UNIQUE (Email)';


CREATE TABLE IF NOT EXISTS "allergen" (
	"allergen_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	PRIMARY KEY("allergen_id")
);




CREATE TABLE IF NOT EXISTS "preference" (
	"preference_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"customer_id" INTEGER NOT NULL,
	"ingredient_id" INTEGER NOT NULL,
	"rating" INTEGER NOT NULL,
	PRIMARY KEY("preference_id")
);




CREATE TABLE IF NOT EXISTS "opinion" (
	"opinion_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"customer_id" INTEGER NOT NULL,
	"rating" INTEGER NOT NULL,
	"opinion" TEXT,
	PRIMARY KEY("opinion_id")
);




CREATE TABLE IF NOT EXISTS "ingredient" (
	"ingredient_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	"calories_100g" INTEGER NOT NULL,
	"unit_of_measure" UNIT_OF_MESUREMENT NOT NULL,
	"protein_100g" REAL NOT NULL,
	"fat_100g" REAL NOT NULL,
	"carbohydrates_100g" REAL,
	PRIMARY KEY("ingredient_id")
);




CREATE TABLE IF NOT EXISTS "course_ingredient" (
	"course_ingredient_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"ingredient_id" INTEGER NOT NULL,
	"course_id" INTEGER NOT NULL,
	PRIMARY KEY("course_ingredient_id")
);




CREATE TABLE IF NOT EXISTS "allergen_customer" (
	"allergen_customer_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"allergen_id" INTEGER NOT NULL,
	"customer_id" INTEGER NOT NULL,
	PRIMARY KEY("allergen_customer_id")
);




CREATE TABLE IF NOT EXISTS "allergen_ingredient" (
	"allergen_ingredient_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"allergen_id" INTEGER NOT NULL,
	"ingredient_id" INTEGER NOT NULL,
	PRIMARY KEY("allergen_ingredient_id")
);




CREATE TABLE IF NOT EXISTS "category" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"description" TEXT,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "course_category" (
	"course_category_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	"category_id" INTEGER NOT NULL,
	PRIMARY KEY("course_category_id")
);




CREATE TABLE IF NOT EXISTS "meal_plan" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	"start_date" DATE,
	"end_date" DATE,
	"description" TEXT,
	"dietician_id" INTEGER,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "meal_plan_day" (
	"mean_plan_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"day_number" INTEGER NOT NULL,
	"meal_plan_id" INTEGER NOT NULL,
	PRIMARY KEY("mean_plan_id")
);




CREATE TABLE IF NOT EXISTS "meal_plan_item" (
	"meal_plan_item_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL UNIQUE,
	"meal_plan_day_id" INTEGER NOT NULL UNIQUE,
	PRIMARY KEY("meal_plan_item_id")
);




CREATE TABLE IF NOT EXISTS "dietician" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"certification" VARCHAR(100),
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "daily_menu" (
	"daily_menu_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"dietitian_id" INTEGER NOT NULL,
	PRIMARY KEY("daily_menu_id")
);




CREATE TABLE IF NOT EXISTS "daily_menu_item" (
	"daily_menu_item_id" INTEGER NOT NULL,
	"menu_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"course_id" INTEGER NOT NULL,
	-- kolejność posiłków w menu
	"sequence" INTEGER NOT NULL,
	PRIMARY KEY("daily_menu_item_id")
);

COMMENT ON TABLE "daily_menu_item" IS 'UNIQUE(SEQUENCE)';
COMMENT ON COLUMN "daily_menu_item"."sequence" IS 'kolejność posiłków w menu';


CREATE TABLE IF NOT EXISTS "order_item_fulfillment" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"cook_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	"status_id" INTEGER NOT NULL,
	"began_at" TIMESTAMP,
	"completed_at" TIMESTAMP,
	"last_updated_at" TIMESTAMP NOT NULL,
	"notes" VARCHAR(255),
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "order_item_fulfillment_status" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255) NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "order_item_delivery" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"courier_id" INTEGER NOT NULL,
	"order_item_id" INTEGER NOT NULL,
	"status_id" INTEGER NOT NULL,
	"began_at" TIMESTAMP,
	"delivered_at" TIMESTAMP,
	"last_updated" TIMESTAMP NOT NULL,
	"notes" VARCHAR(255),
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "order_item_delivery_status" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(255),
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "cook" (
	"cook_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	PRIMARY KEY("cook_id")
);




CREATE TABLE IF NOT EXISTS "courier" (
	"courier_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	PRIMARY KEY("courier_id")
);




CREATE TABLE IF NOT EXISTS "courier_types" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"courier_id" INTEGER NOT NULL,
	"courier_type_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "cook_speciality" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"specialty_id" INTEGER NOT NULL,
	"cook_id" INTEGER NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "administrator" (
	"user_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"date_granted" DATE NOT NULL,
	"date_revoked" DATE,
	PRIMARY KEY("user_id")
);




CREATE TABLE IF NOT EXISTS "specialty" (
	"id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	PRIMARY KEY("id")
);




CREATE TABLE IF NOT EXISTS "courier_type" (
	"courier_type_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"name" TEXT NOT NULL,
	PRIMARY KEY("courier_type_id")
);




CREATE TABLE IF NOT EXISTS "customer_address" (
	"customer_address_id" INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
	"address_id" INTEGER NOT NULL,
	"customer_id" INTEGER NOT NULL,
	PRIMARY KEY("customer_address_id")
);



ALTER TABLE "customer"
ADD FOREIGN KEY("default_address_id") REFERENCES "address"("address_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item"
ADD FOREIGN KEY("delivery_address") REFERENCES "address"("address_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_in_order_item"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_in_order_item"
ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("order_item_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "invoice"
ADD FOREIGN KEY("order_id") REFERENCES "order"("order_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item"
ADD FOREIGN KEY("order_id") REFERENCES "order"("order_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "opinion"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "preference"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "preference"
ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("ingredient_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "allergen_customer"
ADD FOREIGN KEY("allergen_id") REFERENCES "allergen"("allergen_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "allergen_customer"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "allergen_ingredient"
ADD FOREIGN KEY("allergen_id") REFERENCES "allergen"("allergen_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "allergen_ingredient"
ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("ingredient_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_category"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "meal_plan_item"
ADD FOREIGN KEY("meal_plan_day_id") REFERENCES "meal_plan_day"("mean_plan_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "meal_plan_item"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "meal_plan"
ADD FOREIGN KEY("dietician_id") REFERENCES "dietician"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "dietician"
ADD FOREIGN KEY("id") REFERENCES "user"("user_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "complaint"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "complaint"
ADD FOREIGN KEY("course_in_order_id") REFERENCES "course_in_order_item"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "daily_menu"
ADD FOREIGN KEY("daily_menu_id") REFERENCES "dietician"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "daily_menu_item"
ADD FOREIGN KEY("menu_id") REFERENCES "daily_menu"("daily_menu_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "daily_menu_item"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_fulfillment"
ADD FOREIGN KEY("status_id") REFERENCES "order_item_fulfillment_status"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_fulfillment"
ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("order_item_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_delivery"
ADD FOREIGN KEY("order_item_id") REFERENCES "order_item"("order_item_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_delivery"
ADD FOREIGN KEY("status_id") REFERENCES "order_item_delivery_status"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "cook"
ADD FOREIGN KEY("cook_id") REFERENCES "user"("user_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "courier"
ADD FOREIGN KEY("courier_id") REFERENCES "user"("user_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_fulfillment"
ADD FOREIGN KEY("cook_id") REFERENCES "cook"("cook_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "order_item_delivery"
ADD FOREIGN KEY("courier_id") REFERENCES "courier"("courier_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "administrator"
ADD FOREIGN KEY("user_id") REFERENCES "user"("user_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "cook_speciality"
ADD FOREIGN KEY("specialty_id") REFERENCES "specialty"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "cook_speciality"
ADD FOREIGN KEY("cook_id") REFERENCES "cook"("cook_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "courier_types"
ADD FOREIGN KEY("courier_id") REFERENCES "courier"("courier_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "courier_types"
ADD FOREIGN KEY("courier_type_id") REFERENCES "courier_type"("courier_type_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "customer"
ADD FOREIGN KEY("user_id") REFERENCES "user"("user_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_ingredient"
ADD FOREIGN KEY("ingredient_id") REFERENCES "ingredient"("ingredient_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_ingredient"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "course_category"
ADD FOREIGN KEY("category_id") REFERENCES "category"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "meal_plan_day"
ADD FOREIGN KEY("meal_plan_id") REFERENCES "meal_plan"("id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "opinion"
ADD FOREIGN KEY("course_id") REFERENCES "course"("course_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "customer_address"
ADD FOREIGN KEY("address_id") REFERENCES "address"("address_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE "customer_address"
ADD FOREIGN KEY("customer_id") REFERENCES "customer"("customer_id")
ON UPDATE NO ACTION ON DELETE NO ACTION;


-- =================================================================
-- DODAWANIE CHECK CONSTRAINTS
-- =================================================================

-- ============ ADDRESS ============
ALTER TABLE "address"
ADD CONSTRAINT chk_address_deleted_after_created
  CHECK (deleted_at IS NULL OR deleted_at >= created_at);

-- ============ USER ============
ALTER TABLE "user"
ADD CONSTRAINT chk_user_removed_after_created
  CHECK (date_removed IS NULL OR date_removed >= date_created),
ADD CONSTRAINT chk_user_last_login_after_created
  CHECK (last_login IS NULL OR last_login >= date_created::timestamp);

-- ============ COURSE ============
ALTER TABLE "course"
ADD CONSTRAINT chk_course_updated_after_created
  CHECK (updated_at >= created_at),
ADD CONSTRAINT chk_course_created_not_future
  CHECK (created_at <= now());

-- ============ ORDER ============
ALTER TABLE "order"
ADD CONSTRAINT chk_order_placed_not_future
  CHECK (placed_at <= now());

-- ============ ORDER_ITEM_FULFILLMENT ============
ALTER TABLE "order_item_fulfillment"
ADD CONSTRAINT chk_fulfillment_completed_after_began
  CHECK (completed_at IS NULL OR began_at IS NULL OR completed_at >= began_at),
ADD CONSTRAINT chk_fulfillment_last_updated_after_any
  CHECK (
    last_updated_at >= COALESCE(began_at, completed_at, 'epoch'::timestamp)
  );

-- ============ ORDER_ITEM_DELIVERY ============
ALTER TABLE "order_item_delivery"
ADD CONSTRAINT chk_delivery_delivered_after_began
  CHECK (delivered_at IS NULL OR began_at IS NULL OR delivered_at >= began_at),
ADD CONSTRAINT chk_delivery_last_updated_after_any
  CHECK (
    last_updated >= COALESCE(began_at, delivered_at, 'epoch'::timestamp)
  );

-- ============ COMPLAINT ============
ALTER TABLE "complaint"
ADD CONSTRAINT chk_complaint_resolution_after_date
  CHECK (resolution_date IS NULL OR resolution_date >= "date"),
ADD CONSTRAINT chk_complaint_status_resolution_consistency
  CHECK (
    CASE
      WHEN status IN ('positively resolved','negatively resolved')
        THEN resolution_date IS NOT NULL
      WHEN status IN ('submitted','under review')
        THEN resolution_date IS NULL
      ELSE TRUE
    END
  );

-- ============ INVOICE ============
ALTER TABLE "invoice"
ADD CONSTRAINT chk_nip_seller
  CHECK (seller_vat_id ~* '^(PL)?[0-9]{10}$'),
ADD CONSTRAINT chk_nip_buyer
  CHECK (buyer_vat_id IS NULL OR buyer_vat_id ~* '^(PL)?[0-9]{10}$'),
ADD CONSTRAINT chk_currency_3
  CHECK (currency ~ '^[A-Z]{3}$'),
ADD CONSTRAINT chk_invoice_totals
  CHECK (net_total >= 0 AND vat_total >= 0 AND gross_total >= 0),
ADD CONSTRAINT chk_invoice_totals_math
  CHECK (gross_total = net_total + vat_total),
ADD CONSTRAINT chk_invoice_dates_chain
  CHECK (sale_date <= issue_date AND issue_date <= payment_date),
ADD CONSTRAINT chk_invoice_paid_has_past_payment
  CHECK (status <> 'paid' OR payment_date <= CURRENT_DATE);

-- ============ MEAL_PLAN ============
ALTER TABLE "meal_plan"
ADD CONSTRAINT chk_meal_plan_dates
  CHECK (start_date IS NULL OR end_date IS NULL OR start_date <= end_date);

-- ============ ADMINISTRATOR ============
ALTER TABLE "administrator"
ADD CONSTRAINT chk_admin_revoked_after_granted
  CHECK (date_revoked IS NULL OR date_revoked >= date_granted);

-- ============ ORDER_ITEM ============
ALTER TABLE "order_item"
ADD CONSTRAINT chk_order_item_eta_reasonable
  CHECK (expected_delivery_at >= now() - INTERVAL '1 day');

-- ============ ADDRESS ============
ALTER TABLE "address"
ADD CONSTRAINT chk_address_postal_pl
  CHECK (
    CASE
      WHEN country ILIKE 'Poland' OR country ILIKE 'Polska' OR country ILIKE 'PL'
        THEN postal_code ~ '^[0-9]{2}-[0-9]{3}$'
      ELSE TRUE
    END
  );
